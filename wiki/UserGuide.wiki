#summary Stressful Application Test user guide

==Executing Stressful application test== 

To execute, just type

{{{
stressapptest
}}}

on a shell and it will start executing with the default parameters. This usually is not enough for a regular test, so you may want to pass some command line arguments in order to get a real test.

==Command line arguments==

You can control the behavior of stressapptest just passing command-line arguments. Here is a list of the most common arguments:

=== General arguments === 

  * `-M mbytes` : megabytes of ram to test
  * `-s seconds` : number of seconds to run
  * `-m threads` : number of memory copy threads to run
  * `-i threads` : number of memory invert threads to run
  * `-C threads` : number of memory CPU stress threads to run
  * `--paddr_base` : allocate memory starting from this address
  * `-W` : Use more CPU-stressful memory copy
  * `-A` : run in degraded mode on incompatible systems
  * `-p pagesize` : size in bytes of memory chunks
  * `-n ipaddr` : add a network thread connecting to system at 'ipaddr'.
  * `--listen` : run a thread to listen for and respond to network threads.

=== Error handling ===

  * `-l logfile` : log output to file 'logfile'
  * `--max_errors n` : exit early after finding 'n' errors
  * `-v level` : verbosity (0-20), default is 8
  * `--no_errors` : run without checking for errors.
  * `--force_errors` : inject false errors to test error handling.
  * `--force_errors_like_crazy` : inject a lot of false errors to test error handling.
  * `-F` : don't result check each transaction.
  * `--stop_on_errors` : Stop after finding the first error.

=== Disk testing === 

  * `-d device` : add a direct write disk thread with block device (or file) 'device'
  * `--findfiles` : find locations to do disk IO automatically
  * `-f filename` : add a disk thread with tempfile 'filename'
  * `--filesize size` : size of disk I/O tempfiles
  * `--read-block-size` : size of block for reading
  * `--write-block-size` :  size of block for writing. If not defined, the size of block for writing will be defined as the size of block for reading
  * `--segment-size` : size of segments to split disk into.
  * `--cache-size` : size of disk cache.
  * `--blocks-per-segment` : number of blocks to read/write per segment per iteration.
  * `--read-threshold` : maximum time (in us) a block read should take.
  * `--write-threshold` : maximum time (in us) a block write should take.
  * `--random-threads` :  number of random threads for each disk write thread.
  * `--destructive` : write/wipe disk partition.

=== Cache coherency test ===

  * `--cc_test` : do the cache coherency testing
  * `--cc_inc_count` : number of times to increment the cacheline's member
  * `--cc_line_count` : number of cache line sized data structures to allocate for the cache coherency threads to operate

=== Power spike control === 

  * `--pause_delay` : delay (in seconds) between power spikes
  * `--pause_duration` : duration (in seconds) of each pause

=== NUMA control===

  * `--local_numa` :  choose memory regions associated with each CPU to be tested by that CPU"
  * `--remote_numa` : choose memory regions not associated with each CPU to be tested by that CPU

=== Example command lines ===

  * ./stressapptest -s 20 -M 256 -m 8 -C 8 -W  # Allocate 256MB of memory and run 8 "warm copy" threads, and 8 cpu load threads. Exit after 20 seconds.
  * ./stressapptest -f /tmp/file1 -f /tmp/file2  # Run 2 file IO threads, and autodetect memory size and core count to select allocated memory and memory copy threads.